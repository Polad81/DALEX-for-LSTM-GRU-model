# -*- coding: utf-8 -*-
"""
Created on Thu Feb  8 13:03:47 2024

@author: pld
"""
import matplotlib.pyplot as plt
import pandas as pd
from pandas import read_csv
from matplotlib import pyplot
import pandas as pd
import dalex as dx
import numpy as np
import tensorflow as tf
from tensorflow import keras
#dataset=pd.read_excel(r"C:/Users/CASPER/Desktop/yapayzeka/y_z.xlsx", 'Sayfa3', index_col=0)
import pickle
import statsmodels.api as sm
from math import sqrt
from numpy import concatenate
from matplotlib import pyplot
from pandas import read_csv
from pandas import DataFrame
from pandas import concat
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import GRU
from pandas import read_csv

from pandas import DataFrame
from pandas import concat
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler

# convert series to supervised learning
def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
	n_vars = 1 if type(data) is list else data.shape[1]
	df = DataFrame(data)
	cols, names = list(), list()
	# input sequence (t-n, ... t-1)
	for i in range(n_in, 0, -1):
		cols.append(df.shift(i))
		names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]
	# forecast sequence (t, t+1, ... t+n)
	for i in range(0, n_out):
		cols.append(df.shift(-i))
		if i == 0:
			names += [('var%d(t)' % (j+1)) for j in range(n_vars)]
		else:
			names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]
	# put it all together
	agg = concat(cols, axis=1)
	agg.columns = names
	# drop rows with NaN values
	if dropnan:
		agg.dropna(inplace=True)
	return agg
# load dataset
dataset=pd.read_excel(r"C:/Users..../y_z.xlsx", 'Sayfa3', index_col=0)


values = values.astype('float32')



# normalize features
scaler = MinMaxScaler(feature_range=(0, 1))
scaled = scaler.fit_transform(values)
# frame as supervised learning
#reframed = series_to_supervised(scaled, 1, 1)
reframed = series_to_supervised(scaled, 1, 1)
reframed= reframed.rename(columns={'var1(t-1)': 'Oran(t-1)', 'var2(t-1)': 'Tahsilat(t-1)', 
                                   'var3(t-1)':'Gider(t-1)', 'var4(t-1)':'İstihdam(t-1)',
                                  'var1(t)': 'Oran(t)', 'var2(t)': 'Tahsilat(t)', 
                                                                    'var3(t)':'Gider(t)',
                                                                    'var4(t)':'İstihdam(t)'})
# drop columns we don't want to predict

print(reframed.head())

y=reframed['İstihdam(t)']
X_1=reframed[['Oran(t-1)', 'Tahsilat(t-1)',
           'Gider(t-1)', 'İstihdam(t-1)','Oran(t)', 'Tahsilat(t)', 'Gider(t)']]
y=y.values
X=X_1.values

n_train_months = 195
import random
random.seed(27)
train_X, train_y = X[:n_train_months, :], y[:n_train_months]
test_X, test_y = X[n_train_months:, :], y[n_train_months :]


# reshape input to be 3D [samples, timesteps, features]
train_X = train_X.reshape((train_X.shape[0], 1, train_X.shape[1]))
test_X = test_X.reshape((test_X.shape[0], 1, test_X.shape[1]))
print(train_X.shape, train_y.shape, test_X.shape, test_y.shape)

model = Sequential()
model.add(GRU(200,  input_shape=(train_X.shape[1], train_X.shape[2])))
model.add(Dense(300))
model.add(Dense(250))
model.add(Dense(200))
model.add(Dense(100))
model.add(Dense(35))
model.add(Dense(20))
model.add(Dense(10))
model.add(Dense(5))
model.add(Dense(1)) #changed from 1 to 2.
model.compile(loss='mae', optimizer='adam')



history = model.fit(train_X, train_y, epochs=50, batch_size=195, validation_data=(test_X, test_y), verbose=1, shuffle=False)
pyplot.plot(history.history['loss'], label='train')
pyplot.plot(history.history['val_loss'], label='test')
pyplot.legend()
pyplot.show()
# make a prediction
model.summary()
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_absolute_percentage_error
#genel
trainPredict1 = model.predict(train_X)
testPredict1  = model.predict(test_X)
print("trainPredict : ",trainPredict1.shape)
print("testPredict  : ",testPredict1.shape)
test_X = test_X.reshape((test_X.shape[0], test_X.shape[2]))
testPredict=concatenate((test_X[:, :-4], testPredict1), axis=1)
testPredict = scaler.inverse_transform(testPredict)
testPredict=testPredict[:,3]
test_y = test_y.reshape((len(test_y), 1))
test_yy=concatenate((test_X[:, :-4], test_y), axis=1)
test_yyy = scaler.inverse_transform(test_yy)
test_yyy=test_yyy[:,3]


train_X = train_X.reshape((train_X.shape[0], train_X.shape[2]))
trainPredict=concatenate((train_X[:, :-4], trainPredict1), axis=1)
trainPredict = scaler.inverse_transform(trainPredict)
trainPredict=trainPredict[:,3]
train_y = train_y.reshape((len(train_y), 1))
train_y=concatenate((train_X[:, :-4], train_y), axis=1)
train_y = scaler.inverse_transform(train_y)
train_y=train_y[:,3]

rmse= sqrt(mean_squared_error(test_yyy, testPredict))
print('Test RMSE: %.3f' % rmse)
rmse_train = sqrt(mean_squared_error(train_y, trainPredict))
print('Train RMSE: %.3f' % rmse_train)
mae_test = np.mean(np.abs(testPredict-test_yyy))
mae_train = np.mean(np.abs(trainPredict-train_y))
print('Test MAE: %.3f' % mae_test)
print('Train MAE: %.3f' % mae_train)
from sklearn.metrics import mean_absolute_error
mae_test = mean_absolute_error(test_yyy, testPredict)
print('test_MAE: %f' % mae_test)
mae_train = mean_absolute_error(train_y, trainPredict)
print('train_MAE: %f' % mae_train)
mape_test=mean_absolute_percentage_error(test_yyy, testPredict)
print('TG MAPEE_test: %f' % mape_test)
mape_train=mean_absolute_percentage_error(train_y, trainPredict)
print('TG MAPEE_train: %f' % mape_train)
test_r2=r2_score(test_yyy, testPredict)
print('R2_test: %f' % test_r2)
train_r2=r2_score(train_y, trainPredict)
print('R2_train: %f' % train_r2)
###########
import dalex as dx
def predict_function(model, data):
     data = data.values
    data = data.reshape((data.shape[0], 1, data.shape[1]))
    pred=model.predict(data)
    return pred.ravel()
import plotly.express as px
import plotly.io as io
io.renderers.default='svg'
gru_exp = dx.Explainer(model, X_1, y.ravel(), predict_function=predict_function, label = "GRU Pipeline")
import plotly.io as io
io.renderers.default='svg'


gru= gru_exp.model_parts()
gru.plot()
gru_vi_grouped = gru_exp.model_parts(
                variable_groups={'Gelir, Tahsilat': ['1', '2', 
                                              '4', '5'],
                                   'oran': ['0', '5']})


gru_vi_grouped = gru_exp.model_parts(
                variable_groups={'Tahsilat': ['Tahsilat(t-1)', 'Tahsilat(t)'], 
                                 'Oran': ['Oran(t-1)', 'Oran(t)'],
                                   'Gider':['Gider(t-1)', 'Gider(t)'],
                                   'İstihdam':['İstihdam(t-1)']
                                   })

variable_groups={'personal':['gender', 'age', 'sibsp', 'parch'], 'wealth':['class', 'fare']})
io.renderers.default='browser'
io.renderers.default='svg'
gru_vi_grouped.plot()
lstm_vi_grouped.plot()


gru_vi_grouped = gru_exp.model_parts(
                variable_groups={'Tahsilat (t-1)': ['1'],'Tahsilat t': ['5'], 'Oran (t-1)': ['0',], 'Oran t':['4'],
                                   'Gider (t-1)':['2'], 'Gider t':['6'],
                                  # 'İstihdam (t-1)':['3']
                                  })

lstm_vi_grouped = lstm_exp.model_parts(
                variable_groups={'Tahsilat (t-1)': ['1'],'Tahsilat t': ['5'], 'Oran (t-1)': ['0',], 'Oran t':['4'],
                                   'Gider (t-1)':['2'], 'Gider t':['6'],
                                   'İstihdam (t-1)':['3']
                                  })
gru_vi_grouped = gru_exp.model_parts(
                variable_groups={'Tahsilat (t-1)': ['1'],'Tahsilat t': ['5'], 'Oran (t-1)': ['0',], 'Oran t':['4'],
                                   'Gider (t-1)':['2'], 'Gider t':['6'],
                                   'İstihdam (t-1)':['3']
                                  })
#vi_grouped.result
vi_grouped.result
io.renderers.default='browser'
gru_vi_grouped.plot()
lstm_vi_grouped.plot()
vi_grouped.plot()

gru_pd = gru_exp.model_profile()
gru_pd.plot()
gru_pd.plot(geom = 'profiles')#162
lstm_pd = lstm_exp.model_profile()
lstm_pd.plot()
lstm_pd.plot(geom = 'profiles')#162


gru_pd.plot(lstm_pd)


lstm_pd.plot()
lstm_pd.result
md_lstm = lstm_exp.model_diagnostics()
md_lstm.result
md_lstm.plot()

